[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = '''has('lua') && (v:version > 703 || v:version == 703 && has('patch885')) && !has('nvim')'''
on_i = 1
hook_source = '''
set completeopt=menuone
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case  = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3

if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction

inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = '''has('nvim')'''
on_i = 1
hook_source = '''
set completeopt=menuone
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case  = 1

if !exists('g:deoplete#keyword_patterns')
  let g:deoplete#keyword_patterns = {}
endif
let g:deoplete#keyword_patterns['default'] = '\h\w*'

inoremap <expr><C-g> deoplete#undo_completion()
inoremap <expr><C-l> deoplete#complete_common_string()

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction

inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

if !exists('g:deoplete#sources#omni#input_patterns')
  let g:deoplete#sources#omni#input_patterns = {}
endif
'''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['neomru.vim']
on_cmd = ['Unite', 'UniteWithBufferDir']
hook_add = '''
if !has('nvim')
  nnoremap [Unite]   <Nop>
  nmap <Leader>f [Unite]

  nnoremap <silent>  [Unite]u :<C-u>Unite -no-split<Space>
  nnoremap <silent>  [Unite]b :<C-u>Unite buffer<CR>
  nnoremap <silent>  [Unite]f :<C-u>Unite file_rec<CR>
  nnoremap <silent>  [Unite]m :<C-u>Unite file_mru<CR>
  nnoremap <silent>  [Unite]g :<C-u>Unite grep<CR>
endif
'''
hook_source = '''
let g:vinarise_enable_auto_detect = 1
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
if = '''has('nvim')'''
on_cmd = ['Denite', 'DeniteWithBufferDir']
hook_add = '''
nnoremap [Denite]   <Nop>
nmap <Leader>f [Denite]

nnoremap <silent>  [Denite]d :<C-u>Denite -no-split -highlight-mode-insert=Search<Space>
nnoremap <silent>  [Denite]b :<C-u>Denite buffer -highlight-mode-insert=Search<CR>
nnoremap <silent>  [Denite]f :<C-u>Denite file_rec -highlight-mode-insert=Search<CR>
nnoremap <silent>  [Denite]m :<C-u>Denite file_mru -highlight-mode-insert=Search<CR>
nnoremap <silent>  [Denite]g :<C-u>Denite grep -highlight-mode-insert=Search<CR>
'''
hook_source = '''
let g:vinarise_enable_auto_detect = 1
'''
hook_post_source = '''
call denite#custom#map('normal', '<C-j>', '<denite:move_to_next_line>')
call denite#custom#map('normal', '<C-k>', '<denite:move_to_previous_line>')
call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>')
call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>')

call denite#custom#map('insert', '<C-s>', '<denite:do_action:split>')
call denite#custom#map('insert', '<C-v>', '<denite:do_action:vsplit>')
call denite#custom#map('insert', '<C-t>', '<denite:do_action:tabopen>')
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/vimfiler'
depends = 'unite.vim'
on_cmd = ['VimFiler', 'VimFilerExplorer', 'VimFilerBufferDir']
on_map = ['<plug>(vimfiler_switch)']
hook_add = '''
command! Ex execute ':VimFilerBufferDir -find'
nnoremap <Leader>e :<C-u>VimFilerBufferDir -find<CR>
'''
hook_source = '''
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_enable_auto_cd = 1
let g:vimfiler_safe_mode_by_default = 0
let g:vimfiler_ignore_pattern = '\%(^\(\.\)\|\.\(o\|pyc\|class\)$\)'

autocmd Vimrc FileType vimfiler call s:vimfiler_mapping()
function! s:vimfiler_mapping()
  nmap <buffer> R <Plug>(vimfiler_redraw_screen)
endfunction
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['vim-snippets', 'neosnippet-snippets']
on_i = 1
hook_add = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''
hook_source = '''
let g:neosnippet#disable_runtime_snippets = {'_' : 1}
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory=[
      \ g:vim_root . '/snippets',
      \ g:dein_root . '/repos/github.com/neosnippet-snippets/neosnippets',
      \ g:dein_root . '/repos/github.com/vim-snippets/snippets']
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'smancill/conky-syntax.vim'
on_ft = 'conkyrc'

[[plugins]]
repo = 'chrisbra/vim-zsh'
on_ft = ['sh', 'zsh']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = '''
let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'sjl/gundo.vim'
on_cmd = 'GundoToggle'
hook_add = '''
nnoremap <Leader>u :<C-u>GundoToggle<CR>
'''
hook_source = '''
let g:gundo_right = 1
let g:gundo_auto_preview = 0
let g:gundo_close_on_revert = 1
if has('python3')
  let g:gundo_prefer_python3 = 1
endif
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = [
  '<Plug>(easymotion-overwin-f2)',
  '<Plug>(easymotion-bd-f2)',
]
hook_add = '''
nmap s <Plug>(easymotion-overwin-f2)
vmap s <Plug>(easymotion-bd-f2)
'''
hook_source = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = [
  '<Plug>(incsearch-forward)',
  '<Plug>(incsearch-backward)',
  '<Plug>(incsearch-stay)',
]
hook_add = '''
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
'''

[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'
on_func = 'incsearch#config#fuzzy#converter'
hook_add = '''
function! s:config_fuzzyall(...) abort
  return extend(
        \ copy({
        \   'converters': [incsearch#config#fuzzy#converter()],
        \ }),
        \ get(a:, 1, {}))
endfunction

noremap <silent><expr> z/ incsearch#go(<SID>config_fuzzyall())
'''

[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'
on_func = 'incsearch#config#easymotion#module'
hook_add = '''
function! s:config_easyfuzzymotion(...) abort
  return extend(
        \ copy({
        \   'converters': [incsearch#config#fuzzy#converter()],
        \   'modules': [incsearch#config#easymotion#module()],
        \   'keymap': {"\<CR>": '<Over>(easymotion)'},
        \   'is_expr': 0,
        \   'is_stay': 1
        \ }),
        \ get(a:, 1, {}))
endfunction

noremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())
'''

[[plugins]]
repo = 'vim-scripts/Align'
on_cmd = 'Align'
hook_source = '''
let g:Align_xstrlen = 3
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

